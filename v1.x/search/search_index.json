{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Changelog/","title":"Changelog","text":""},{"location":"Changelog/#v115-2023-05-06","title":"v1.1.5 2023-05-06","text":"<ul> <li>feat: Add operation_id_callback to v1.x (#69)</li> </ul>"},{"location":"Changelog/#v114-2022-05-05","title":"v1.1.4 2022-05-05","text":"<ul> <li>fix: Trailing slash in APIBlueprint</li> </ul>"},{"location":"Changelog/#v113-2022-05-01","title":"v1.1.3 2022-05-01","text":"<ul> <li>fix: Find globalns for the unwrapped func</li> <li>#19 fix: Trailing slash in APIBlueprint. Thinks @ev-agelos</li> <li>add description for UnprocessableEntity</li> <li>remove printouts in <code>__init__.py</code></li> </ul>"},{"location":"Changelog/#v112-2022-04-01","title":"v1.1.2 2022-04-01","text":"<ul> <li>#16 Fix fileStorage list is not supported. Thanks @tekrei</li> </ul>"},{"location":"Changelog/#v110-2022-03-13","title":"v1.1.0 2022-03-13","text":"<ul> <li>#13 drop support for flask 1.0.x. Thanks @danmur</li> <li>#15 Fix to enable BaseModel with root property. Thanks @tarcisiojr</li> <li>#14 Custom parameters: doc_prefix, api_doc_url, swagger_url, redoc_url, rapidoc_url. Thanks @barryrobison</li> <li>Upgrade swagger UI v4.6.2</li> <li>Upgrade Redoc v2.0.0-rc.63</li> <li>Upgrade RapiDoc v9.2.0</li> </ul>"},{"location":"Changelog/#v101-2022-02-12","title":"v1.0.1 2022-02-12","text":"<ul> <li>add operation_id for OpenAPI Specification</li> </ul>"},{"location":"Changelog/#v100-2022-01-11","title":"v1.0.0 2022-01-11","text":"<ul> <li>#10 Fix: header's title case. Thanks @rrr34</li> <li>#9 Support for extra responses. Thanks @blynn99</li> <li>#12 Support for path operation field deprecated. Thanks   @blynn99</li> <li>Add keyword parameters <code>summary</code> and <code>description</code></li> <li>Add servers for OpenAPI</li> <li>Upgrade swagger UI v4.1.3</li> <li>Upgrade Redoc v2.0.0-rc.59</li> <li>Add rapidoc</li> </ul>"},{"location":"Changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Renamed <code>securitySchemes</code> to <code>security_schemes</code></li> <li>Renamed <code>docExpansion</code> to <code>doc_expansion</code></li> </ul>"},{"location":"Changelog/#v099-2021-12-09","title":"v0.9.9 2021-12-09","text":"<ul> <li>fix: default value in query and form model</li> <li>fix: empty form and body</li> <li>support <code>from __future__ import annotations</code></li> <li>drop python36</li> </ul>"},{"location":"Changelog/#v098-2021-11-12","title":"v0.9.8 2021-11-12","text":"<ul> <li>add Configuration <code>docExpansion</code></li> <li>query and form add array support</li> </ul>"},{"location":"Changelog/#v097-2021-08-19","title":"v0.9.7 2021-08-19","text":"<ul> <li>fix: path $ref</li> <li>fix: markdown enum</li> </ul>"},{"location":"Changelog/#v096-2021-08-18","title":"v0.9.6 2021-08-18","text":"<ul> <li>Export to markdown(Experimental)</li> </ul>"},{"location":"Changelog/#v095-2021-07-11","title":"v0.9.5 2021-07-11","text":"<ul> <li>remove <code>validate_resp</code> and add <code>VALIDATE_RESPONSE</code></li> </ul>"},{"location":"Changelog/#v094-2021-07-03","title":"v0.9.4 2021-07-03","text":"<ul> <li>OpenAPI add responses and APIBlueprint add abp_responses</li> <li>fix: validate response error when responses is empty dict</li> <li>#3 endpoint and APIBlueprint add <code>doc_ui</code>. Thanks   @DerManoMann</li> <li>#4 fix: response description. Thanks @DerManoMann</li> <li>#5 add custom parameter <code>oauth_config</code>. Thanks @DerManoMann</li> <li>#6 support validation Flask Response. Thanks @DerManoMann</li> <li>#7 fix: response validation does not work when uses   http.HTTPStatus enums as status_code. Thanks @DerManoMann</li> </ul>"},{"location":"Changelog/#v093-2021-06-08","title":"v0.9.3 2021-06-08","text":"<ul> <li>APIBlueprint add abp_tags and abp_security</li> <li>fix: tags de-duplication</li> <li>fix: operation summary and description</li> </ul>"},{"location":"Changelog/#v092-2021-05-17","title":"v0.9.2 2021-05-17","text":"<ul> <li>fix: _do_decorator</li> <li>add doc_ui args. support close swagger UI and redoc</li> </ul>"},{"location":"Changelog/#v091-2021-05-16","title":"v0.9.1 2021-05-16","text":"<ul> <li>fix\uff1arequest data is None</li> <li>json--&gt;body</li> <li>set 422 Content-Type application/json</li> <li>raise response validate exception</li> <li>fix: TypeError: issubclass() arg 1 must be a class</li> </ul>"},{"location":"Changelog/#v090-2021-05-13","title":"v0.9.0 2021-05-13","text":"<ul> <li>first version</li> </ul>"},{"location":"Example/","title":"Example","text":""},{"location":"Example/#simple-demo","title":"Simple Demo","text":"<pre><code>from pydantic import BaseModel\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\n\nbook_tag = Tag(name='book', description='Some Book')\n\n\nclass BookQuery(BaseModel):\n    age: int\n    author: str\n\n\n@app.get('/book', tags=[book_tag])\ndef get_book(query: BookQuery):\n\"\"\"get books\n    get all books\n    \"\"\"\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": query.author},\n            {\"bid\": 2, \"age\": query.age, \"author\": query.author}\n        ]\n    }\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#rest-demo","title":"REST Demo","text":"<pre><code>from http import HTTPStatus\nfrom typing import Optional, List\n\nfrom pydantic import BaseModel, Field\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\nfrom flask_openapi3.models.security import HTTPBearer, OAuth2, OAuthFlows, OAuthFlowImplicit\n\ninfo = Info(title='book API', version='1.0.0')\njwt = HTTPBearer(bearerFormat=\"JWT\")\noauth2 = OAuth2(flows=OAuthFlows(\n    implicit=OAuthFlowImplicit(\n        authorizationUrl=\"https://example.com/api/oauth/dialog\",\n        scopes={\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n        }\n    )))\nsecurity_schemes = {\"jwt\": jwt, \"oauth2\": oauth2}\n\n\nclass NotFoundResponse(BaseModel):\n    code: int = Field(-1, description=\"Status Code\")\n    message: str = Field(\"Resource not found!\", description=\"Exception Information\")\n\n\napp = OpenAPI(__name__, info=info, security_schemes=security_schemes, responses={\"404\": NotFoundResponse})\n\nbook_tag = Tag(name='book', description='Some Book')\nsecurity = [\n    {\"jwt\": []},\n    {\"oauth2\": [\"write:pets\", \"read:pets\"]}\n]\n\napp.config[\"VALIDATE_RESPONSE\"] = True\n\n\nclass BookPath(BaseModel):\n    bid: int = Field(..., description='book id')\n\n\nclass BookQuery(BaseModel):\n    age: Optional[int] = Field(None, description='Age')\n    s_list: List[str] = Field(None, alias='s_list[]', description='some array')\n\n\nclass BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass BookBodyWithID(BaseModel):\n    bid: int = Field(..., description='book id')\n    age: Optional[int] = Field(None, ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass BookResponse(BaseModel):\n    code: int = Field(0, description=\"Status Code\")\n    message: str = Field(\"ok\", description=\"Exception Information\")\n    data: Optional[BookBodyWithID]\n\n\n@app.get(\n    '/book/&lt;int:bid&gt;',\n    tags=[book_tag],\n    summary='new summary',\n    description='new description',\n    responses={\"200\": BookResponse},\n    extra_responses={\"200\": {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}}},\n    security=security\n)\ndef get_book(path: BookPath):\n\"\"\"Get book\n    Get some book by id, like:\n    http://localhost:5000/book/3\n    \"\"\"\n    if path.bid == 4:\n        return NotFoundResponse().dict(), 404\n    return {\"code\": 0, \"message\": \"ok\", \"data\": {\"bid\": path.bid, \"age\": 3, \"author\": 'no'}}\n\n\n# set doc_ui False disable openapi UI\n@app.get('/book', doc_ui=True, deprecated=True)\ndef get_books(query: BookQuery):\n\"\"\"get books\n    get all books\n    \"\"\"\n    print(query)\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": 'a1'},\n            {\"bid\": 2, \"age\": query.age, \"author\": 'a2'}\n        ]\n    }\n\n\n@app.post('/book', tags=[book_tag], responses={\"200\": BookResponse})\ndef create_book(body: BookBody):\n    print(body)\n    return {\"code\": 0, \"message\": \"ok\"}, HTTPStatus.OK\n\n\n@app.put('/book/&lt;int:bid&gt;', tags=[book_tag])\ndef update_book(path: BookPath, body: BookBody):\n    print(path)\n    print(body)\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n@app.delete('/book/&lt;int:bid&gt;', tags=[book_tag], doc_ui=False)\ndef delete_book(path: BookPath):\n    print(path)\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#apiblueprint","title":"APIBlueprint","text":"<pre><code>from typing import Optional\n\nfrom pydantic import BaseModel, Field\n\nfrom flask_openapi3 import APIBlueprint, OpenAPI\nfrom flask_openapi3 import HTTPBearer\nfrom flask_openapi3 import Tag, Info\n\ninfo = Info(title='book API', version='1.0.0')\nsecurity_schemes = {\"jwt\": HTTPBearer(bearerFormat=\"JWT\")}\n\napp = OpenAPI(__name__, info=info, security_schemes=security_schemes)\n\ntag = Tag(name='book', description=\"Some Book\")\nsecurity = [{\"jwt\": []}]\n\n\nclass Unauthorized(BaseModel):\n    code: int = Field(-1, description=\"Status Code\")\n    message: str = Field(\"Unauthorized!\", description=\"Exception Information\")\n\n\napi = APIBlueprint(\n    '/book',\n    __name__,\n    url_prefix='/api',\n    abp_tags=[tag],\n    abp_security=security,\n    abp_responses={\"401\": Unauthorized},\n    # disable openapi UI\n    doc_ui=True\n)\n\n\nclass BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass Path(BaseModel):\n    bid: int = Field(..., description='book id')\n\n\n@api.get('/book', doc_ui=False)\ndef get_book():\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n@api.post('/book', extra_responses={\"200\": {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}}})\ndef create_book(body: BookBody):\n    assert body.age == 3\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n@api.put('/book/&lt;int:bid&gt;')\ndef update_book(path: Path, body: BookBody):\n    assert path.bid == 1\n    assert body.age == 3\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n# register api\napp.register_api(api)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#upload-file-demo","title":"Upload File Demo","text":"<pre><code>from pydantic import BaseModel, Field\n\nfrom flask_openapi3 import OpenAPI, FileStorage\n\napp = OpenAPI(__name__)\n\n\nclass UploadFileForm(BaseModel):\n    file: FileStorage\n    file_type: str = Field(None, description=\"File Type\")\n\n\n@app.post('/upload')\ndef upload_file(form: UploadFileForm):\n    print(form.file.filename)\n    print(form.file_type)\n    form.file.save('test.jpg')\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#a-complete-project","title":"A complete project","text":"<p>see flask-api-demo</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2021 llc</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Quickstart/","title":"Quickstart","text":"<p><code>flask_openapi3</code> based on Flask and Pydantic, So you can use it like Flask.</p>"},{"location":"Quickstart/#a-minimal-application","title":"A Minimal Application","text":"<p>Just like Flask, Create <code>hello.py</code>:</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>And then run it:</p> <pre><code>python hello.py\n</code></pre> <p>You will see the output information:</p> <pre><code> * Serving Flask app 'just_flask' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre>"},{"location":"Quickstart/#rest-api","title":"REST API","text":"<p>You can use <code>get</code>, <code>post</code>, <code>put</code>, <code>patch</code>, <code>delete</code> REST API in <code>flask-openapi3</code>.</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.get('/book')\ndef get_books():\n    return [\"book1\", \"book2\"]\n\n\n@app.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"Quickstart/#apiblueprint","title":"APIBlueprint","text":"<p>APIBlueprint based on Flask Blueprint, you should use <code>register_api</code> instead of  <code>register_blueprint</code>.</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\napi = APIBlueprint('/book', __name__, url_prefix='/api')\n\n\n@api.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\n# register api\napp.register_api(api)\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"","title":"Home","text":"<p> Generate REST API and OpenAPI documentation for your Flask project. </p> <p> </p> <p>Flask OpenAPI3 is a web API framework based on Flask. It uses Pydantic to verify data and automatic generation of interaction documentation: Swagger UI, ReDoc and RapiDoc.</p> <p>The key features are:</p> <ul> <li> <p>Easy to code: Easy to use and easy to learn</p> </li> <li> <p>Standard document specification: Based on OpenAPI Specification</p> </li> <li> <p>Interactive OpenAPI documentation: Swagger UI,    Redoc and RapiDoc</p> </li> <li> <p>Data validation: Fast data verification based on Pydantic</p> </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.7+</p> <p>flask-openapi3 be dependent on the following libraries:</p> <ul> <li>Flask for the web app.</li> <li>Pydantic for the data validation.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U flask-openapi3\n</code></pre>"},{"location":"#a-simple-example","title":"A Simple Example","text":"<p>Here's a simple example, further go to the Example.</p> <pre><code>from pydantic import BaseModel\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\n\nbook_tag = Tag(name='book', description='Some Book')\n\n\nclass BookQuery(BaseModel):\n    age: int\n    author: str\n\n\n@app.get('/book', tags=[book_tag])\ndef get_book(query: BookQuery):\n\"\"\"get books\n    get all books\n    \"\"\"\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": query.author},\n            {\"bid\": 2, \"age\": query.age, \"author\": query.author}\n        ]\n    }\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"#api-document","title":"API Document","text":"<p>Run the simple example, and go to http://127.0.0.1:5000/openapi.</p> <p>You will see the documentation: Swagger UI,  Redoc and RapiDoc.</p> <p> </p>"},{"location":"OpenAPI/Info/","title":"Info","text":"<p><code>flask-openapi3</code> provide Swagger UI, Redoc and RapiDoc interactive documentation. Before that, you should know something about the OpenAPI Specification.</p> <p>You must import <code>Info</code> from <code>flask-openapi3</code>, it needs some parameters: <code>title</code>, <code>version</code> ... , more information see the OpenAPI Specification Info Object.</p> <pre><code>from flask_openapi3 import Info\nfrom flask_openapi3 import OpenAPI, APIBlueprint\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\napi = APIBlueprint('/book', __name__, url_prefix='/api')\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>run it, and go to http://127.0.0.1:5000/openapi, you will see the documentation.</p> <p> </p>"},{"location":"OpenAPI/OAuth/","title":"OAuth","text":"<p>New in v0.9.4</p> <p>You can pass <code>oauth_config</code> when initializing <code>OpenAPI</code>, see the demo.</p> <p>Here's more information about OAuth 2.0 configuration</p>"},{"location":"OpenAPI/Request/","title":"Request","text":"<p>First, you need to import <code>BaseModel</code> from <code>pydantic</code>:</p> <pre><code>from pydantic import BaseModel\n</code></pre>"},{"location":"OpenAPI/Request/#path","title":"path","text":"<p>Request parameter in rules\uff0c<code>@app.get('/book/&lt;int:bid&gt;')</code>.</p> <p>You have to declare path model as a class that inherits from  <code>BaseModel</code>:</p> <pre><code>class BookPath(BaseModel):\n    bid: int = Field(..., description='book id')\n\n\n@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], security=security)\ndef get_book(path: BookPath):\n...\n</code></pre>"},{"location":"OpenAPI/Request/#query","title":"query","text":"<p>Receive flask <code>request.args</code>.</p> <p>Info</p> <pre><code>from flask import request\n</code></pre> <p>like path, you need pass <code>query</code> to view function.</p> <pre><code>class BookQuery(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\n@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], security=security)\ndef get_book(path: BookPath, query: BookQuery):\n...\n</code></pre>"},{"location":"OpenAPI/Request/#form","title":"form","text":"<p>Receive flask <code>request.form</code> and <code>request.files</code>.</p> <pre><code>class UploadFileForm(BaseModel):\n    file: FileStorage  # request.files[\"file\"]\n    file_type: str = Field(None, description=\"File type\")\n\n\n@app.post('/upload')\ndef upload_file(form: UploadFileForm):\n...\n</code></pre>"},{"location":"OpenAPI/Request/#body","title":"body","text":"<p>Receive flask <code>request.json</code>.</p> <pre><code>class BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\n@app.post('/book', tags=[book_tag])\ndef create_book(body: BookBody):\n...\n</code></pre>"},{"location":"OpenAPI/Request/#header","title":"header","text":"<p>Receive flask <code>request.headers</code>.</p>"},{"location":"OpenAPI/Request/#cookie","title":"cookie","text":"<p>Receive flask <code>request.cookies</code>.</p>"},{"location":"OpenAPI/Response/","title":"Response","text":"<p>If you want to validate response and generate Schemas, pass the <code>responses</code>.</p> <pre><code>class BookBodyWithID(BaseModel):\n    bid: int = Field(..., description='book id')\n    age: Optional[int] = Field(None, ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass BookResponse(BaseModel):\n    code: int = Field(0, description=\"status code\")\n    message: str = Field(\"ok\", description=\"exception information\")\n    data: BookBodyWithID\n\n\n@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], responses={\"200\": BookResponse}, security=security)\ndef get_book(path: BookPath, query: BookBody):\n\"\"\"get book\n    get book by id, age or author\n    \"\"\"\n    return {\"code\": 0, \"message\": \"ok\", \"data\": {\"bid\": path.bid, \"age\": query.age, \"author\": query.author}}\n</code></pre> <p>New in v0.9.5</p> <p>By default, the <code>VALIDATE_RESPONSE</code> environment variable is <code>False</code>. You can set it <code>True</code> to validate responses in the development environment.</p> <p>Warning</p> <p>Please do not use it in the production environment, because it will reduce the performance.</p> <p></p>"},{"location":"OpenAPI/Response/#openapi-responses","title":"OpenAPI responses","text":"<p>New in v0.9.4</p> <p>You can add <code>responses</code> for each API under the <code>app</code> wrapper.</p> <pre><code>app = OpenAPI(\n    __name__, \n    info=info, \nresponses={\"404\": NotFoundResponse}\n)\n\n@app.get(...)\ndef endpoint():\n    ...\n</code></pre>"},{"location":"OpenAPI/Response/#abp_responses","title":"abp_responses","text":"<p>New in v0.9.4</p> <p>You can add <code>responses</code> for each API under the <code>api</code> wrapper.</p> <pre><code>class Unauthorized(BaseModel):\n    code: int = Field(-1, description=\"Status Code\")\n    message: str = Field(\"Unauthorized!\", description=\"Exception Information\")\n\n\napi = APIBlueprint(\n    '/book', \n    __name__, \n    url_prefix='/api',\nabp_responses={\"401\": Unauthorized}\n)\n\n@api.get(...)\ndef endpoint():\n    ...\n</code></pre>"},{"location":"OpenAPI/Response/#extra_responses","title":"extra_responses","text":"<p>New in v1.0.0</p> <p>You can pass to your path operation decorators a parameter <code>extra_responses</code>.</p> <p>It receives a <code>dict</code>, the keys are status codes for each response, like <code>200</code>, and the values are other dicts with the information for each of them.</p> <p>Like this:</p> <pre><code>@app.get(\n    '/book/&lt;int:bid&gt;',\n    tags=[book_tag],\n    responses={\"200\": BookResponse},\n    extra_responses={\"200\": {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}}},\n    security=security\n)\ndef get_book(path: BookPath):\n    ...\n\n\n@api.post('/book', extra_responses={\"200\": {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}}})\ndef create_book(body: BookBody):\n    ...\n</code></pre>"},{"location":"OpenAPI/Response/#more-information-about-openapi-responses","title":"More information about OpenAPI responses","text":"<ul> <li>OpenAPI Responses Object, it includes the Response Object.</li> <li>OpenAPI Response Object.</li> </ul>"},{"location":"OpenAPI/SecuritySchemes/","title":"SecuritySchemes","text":"<p>Like Info, import <code>HTTPBearer</code> from <code>flask_openapi3</code>, more features see the OpenAPI Specification Security Scheme Object.</p> <p>First, you need define the security_schemes  and security variable:</p> <pre><code>security_schemes = {\"jwt\": HTTPBearer(bearerFormat=\"JWT\")}\nsecurity = [{\"jwt\": []}]\n\napp = OpenAPI(__name__, info=info, security_schemes=security_schemes)\n</code></pre> <p>Second, add pass the security to your api, like this:</p> <pre><code>@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], security=security)\ndef get_book(path: Path, query: BookBody):\n    ...\n</code></pre> <p>result:</p> <p></p>"},{"location":"OpenAPI/SecuritySchemes/#abp_security","title":"abp_security","text":"<p>New in v0.9.3</p> <p>You don't need to specify security for every api.</p> <pre><code>tag = Tag(name='book', description=\"Some Book\")\nsecurity = [{\"jwt\": []}]\napi = APIBlueprint('/book', __name__, abp_tags=[tag], abp_security=security)\n@api.post('/book')\ndef create_book(body: BookBody):\n    ...\n</code></pre>"},{"location":"OpenAPI/Specification/","title":"Specification","text":"<p>If you need the complete Specification(json) , go to http://127.0.0.1:5000/openapi/openapi.json</p>"},{"location":"OpenAPI/Specification/#doc_ui","title":"doc_ui","text":"<p>You can pass <code>doc_ui=False</code> to disable the <code>OpenAPI spec</code> when init <code>OpenAPI</code>.</p> <pre><code>app = OpenAPI(__name__, info=info, doc_ui=False)\n</code></pre> <p>New in v0.9.4</p> <p>You can also use <code>doc_ui</code> in endpoint or when initializing <code>APIBlueprint</code>.</p> <pre><code>api = APIBlueprint(\n    '/book',\n    __name__,\ndoc_ui=False\n)\n\n# or\n\n@api.get('/book', doc_ui=False)\ndef get_book():\n    ...\n</code></pre>"},{"location":"OpenAPI/Specification/#deprecated","title":"deprecated","text":"<p>New in v1.0.0</p> <p><code>deprecated</code>: mark as deprecated support. Default to not True.</p> <pre><code>@app.get('/book', deprecated=True)\ndef get_books(query: BookQuery):\n    ...\n</code></pre>"},{"location":"OpenAPI/Specification/#doc_expansion","title":"doc_expansion","text":"<p>Just for Swagger UI.</p> <p>String=[\"list\", \"full\", \"none\"].</p> <p>Controls the default expansion setting for the operations and tags. It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing).</p> <p>More information to see Configuration.</p> <pre><code>app = OpenAPI(__name__, info=info, doc_expansion='full')\n</code></pre>"},{"location":"OpenAPI/Specification/#servers","title":"servers","text":"<p>An array of Server Objects, which provide connectivity information to a target server. If the server's property is not provided, or is an empty array, the default value would be a Server Object with an url value of /.</p> <pre><code>from flask_openapi3 import OpenAPI, Server\n\nservers = [\n    Server(url='http://127.0.0.1:5000'),\n    Server(url='https://127.0.0.1:5000'),\n]\napp = OpenAPI(__name__, info=info, servers=servers)\n</code></pre>"},{"location":"OpenAPI/Summary%20and%20Description/","title":"Summary and Description","text":"<p>You need add docs to the view-func. The first line is the summary, and the rest is the description. like this:</p> <pre><code>@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], responses={\"200\": BookResponse}, security=security)\ndef get_book(path: BookPath, query: BookBody):\n\"\"\"Get book\n    Get some book by id, like:\n    http://localhost:5000/book/3\n    \"\"\"\nreturn {\"code\": 0, \"message\": \"ok\", \"data\": {\"bid\": path.bid, \"age\": query.age, \"author\": query.author}}\n</code></pre> <p></p> <p>New in v1.0.0</p> <p>Now keyword parameters <code>summary</code> and <code>description</code> is supported, it will be take first.</p> <pre><code>@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], summary=\"new summary\", description='new description', responses={\"200\": BookResponse}, security=security)\ndef get_book(path: BookPath, query: BookBody):\n\"\"\"Get book\n    Get some book by id, like:\n    http://localhost:5000/book/3\n    \"\"\"\n    return {\"code\": 0, \"message\": \"ok\", \"data\": {\"bid\": path.bid, \"age\": query.age, \"author\": query.author}}\n</code></pre> <p></p>"},{"location":"OpenAPI/Tag/","title":"Tag","text":"<p>You can also specify tag for apis, like this:</p> <pre><code>...\n\nbook_tag = Tag(name='book', description='Some Book')\n@api.get('/book', tags=[book_tag])\ndef get_book():\n\n\n...\n</code></pre> <p>and then you will get the magic.</p> <p></p>"},{"location":"OpenAPI/Tag/#abp_tags","title":"abp_tags","text":"<p>New in v0.9.3</p> <p>You don't need to specify tag for every api.</p> <pre><code>tag = Tag(name='book', description=\"Some Book\")\n\napi = APIBlueprint('/book', __name__, url_prefix='/api', abp_tags=[tag])\n@api.post('/book')\ndef create_book(body: BookBody):\n    ...\n</code></pre>"},{"location":"Reference/APIBlueprint/","title":"APIBlueprint","text":"<p>         Bases: <code>Blueprint</code></p> Source code in <code>flask_openapi3/api_blueprint.py</code> <pre><code>class APIBlueprint(Blueprint):\n    def __init__(\n            self,\n            name: str,\n            import_name: str,\n            *,\n            abp_tags: Optional[List[Tag]] = None,\n            abp_security: Optional[List[Dict[str, List[str]]]] = None,\n            abp_responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            doc_ui: bool = True,\n            operation_id_callback: Callable = get_operation_id_for_path,\n            **kwargs: Any\n    ) -&gt; None:\n\"\"\"\n        Based on Flask Blueprint\n\n        Arguments:\n            name: The name of the blueprint. Will be prepended to each endpoint name.\n            import_name: The name of the blueprint package, usually\n                         ``__name__``. This helps locate the ``root_path`` for the blueprint.\n            abp_tags: APIBlueprint tags for every api\n            abp_security: APIBlueprint security for every api\n            abp_responses: APIBlueprint response model\n            doc_ui: add openapi document UI(swagger and redoc). Defaults to True.\n            operation_id_callback: Callback function for custom operation_id generation.\n                Receives name (str), path (str) and method (str) parameters.\n                Defaults to `get_operation_id_for_path` from utils\n            kwargs: Flask Blueprint kwargs\n        \"\"\"\n        super(APIBlueprint, self).__init__(name, import_name, **kwargs)\n        self.paths = dict()\n        self.components_schemas = dict()\n        self.components = Components()\n        self.tags = []\n        self.tag_names = []\n\n        self.abp_tags = abp_tags or []\n        self.abp_security = abp_security or []\n        self.abp_responses = abp_responses or {}\n        self.doc_ui = doc_ui\n        self.operation_id_callback: Callable = operation_id_callback\n\n    def _do_decorator(\n            self,\n            rule: str,\n            func: Callable,\n            *,\n            tags: List[Tag] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Dict[str, Type[BaseModel]] = None,\n            extra_responses: Dict[str, dict] = None,\n            security: List[Dict[str, List[Any]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True,\n            method: str = HTTPMethod.GET\n    ) -&gt; Tuple[\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Dict[str, Type[BaseModel]]\n    ]:\n\"\"\"\n        Collect openapi specification information\n        :param rule: flask route\n        :param func: flask view_func\n        :param tags: api tag\n        :param responses: response model\n        :param extra_responses: extra response dict\n        :param security: security name\n        :param doc_ui: add openapi document UI(swagger and redoc). Defaults to True.\n        :param deprecated: mark as deprecated support. Default to not True.\n        :param operation_id: unique string used to identify the operation.\n        :param method: api method\n        :return:\n        \"\"\"\n        if self.doc_ui is True and doc_ui is True:\n            if responses is None:\n                responses = {}\n            if extra_responses is None:\n                extra_responses = {}\n            validate_responses_type(responses)\n            validate_responses_type(self.abp_responses)\n            validate_responses_type(extra_responses)\n            # global response combine api responses\n            combine_responses = deepcopy(self.abp_responses)\n            combine_responses.update(**responses)\n            # create operation\n            operation = get_operation(func, summary=summary, description=description)\n            # add security\n            if security is None:\n                security = []\n            operation.security = security + self.abp_security or None\n            # only set `deprecated` if True otherwise leave it as None\n            if deprecated:\n                operation.deprecated = True\n            # Unique string used to identify the operation.\n            operation.operationId = operation_id or self.operation_id_callback(\n                name=func.__name__, path=rule, method=method\n            )\n            # store tags\n            tags = tags + self.abp_tags if tags else self.abp_tags\n            parse_and_store_tags(tags, self.tags, self.tag_names, operation)\n            # parse parameters\n            header, cookie, path, query, form, body = \\\n                parse_parameters(func, components_schemas=self.components_schemas, operation=operation)\n            # parse response\n            get_responses(combine_responses, extra_responses, self.components_schemas, operation)\n            uri = get_openapi_path(rule)\n            trail_slash = uri.endswith('/')\n            # merge url_prefix and uri\n            uri = self.url_prefix.rstrip(\"/\") + \"/\" + uri.lstrip(\"/\") if self.url_prefix else uri\n            if not trail_slash:\n                uri = uri.rstrip('/')\n            # parse method\n            parse_method(uri, method, self.paths, operation)\n            return header, cookie, path, query, form, body, combine_responses\n        else:\n            # parse parameters\n            header, cookie, path, query, form, body = parse_parameters(func, doc_ui=False)\n            return header, cookie, path, query, form, body, {}\n\n    def get(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.GET\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.GET]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def post(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.POST\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.POST]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def put(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.PUT\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.PUT]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def delete(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.DELETE\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.DELETE]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def patch(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.PATCH\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.PATCH]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.api_blueprint.APIBlueprint.__init__","title":"<code>__init__(name, import_name, *, abp_tags=None, abp_security=None, abp_responses=None, doc_ui=True, operation_id_callback=get_operation_id_for_path, **kwargs)</code>","text":"<p>Based on Flask Blueprint</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the blueprint. Will be prepended to each endpoint name.</p> required <code>import_name</code> <code>str</code> <p>The name of the blueprint package, usually          <code>__name__</code>. This helps locate the <code>root_path</code> for the blueprint.</p> required <code>abp_tags</code> <code>Optional[List[Tag]]</code> <p>APIBlueprint tags for every api</p> <code>None</code> <code>abp_security</code> <code>Optional[List[Dict[str, List[str]]]]</code> <p>APIBlueprint security for every api</p> <code>None</code> <code>abp_responses</code> <code>Optional[Dict[str, Type[BaseModel]]]</code> <p>APIBlueprint response model</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>add openapi document UI(swagger and redoc). Defaults to True.</p> <code>True</code> <code>operation_id_callback</code> <code>Callable</code> <p>Callback function for custom operation_id generation. Receives name (str), path (str) and method (str) parameters. Defaults to <code>get_operation_id_for_path</code> from utils</p> <code>get_operation_id_for_path</code> <code>kwargs</code> <code>Any</code> <p>Flask Blueprint kwargs</p> <code>{}</code> Source code in <code>flask_openapi3/api_blueprint.py</code> <pre><code>def __init__(\n        self,\n        name: str,\n        import_name: str,\n        *,\n        abp_tags: Optional[List[Tag]] = None,\n        abp_security: Optional[List[Dict[str, List[str]]]] = None,\n        abp_responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        doc_ui: bool = True,\n        operation_id_callback: Callable = get_operation_id_for_path,\n        **kwargs: Any\n) -&gt; None:\n\"\"\"\n    Based on Flask Blueprint\n\n    Arguments:\n        name: The name of the blueprint. Will be prepended to each endpoint name.\n        import_name: The name of the blueprint package, usually\n                     ``__name__``. This helps locate the ``root_path`` for the blueprint.\n        abp_tags: APIBlueprint tags for every api\n        abp_security: APIBlueprint security for every api\n        abp_responses: APIBlueprint response model\n        doc_ui: add openapi document UI(swagger and redoc). Defaults to True.\n        operation_id_callback: Callback function for custom operation_id generation.\n            Receives name (str), path (str) and method (str) parameters.\n            Defaults to `get_operation_id_for_path` from utils\n        kwargs: Flask Blueprint kwargs\n    \"\"\"\n    super(APIBlueprint, self).__init__(name, import_name, **kwargs)\n    self.paths = dict()\n    self.components_schemas = dict()\n    self.components = Components()\n    self.tags = []\n    self.tag_names = []\n\n    self.abp_tags = abp_tags or []\n    self.abp_security = abp_security or []\n    self.abp_responses = abp_responses or {}\n    self.doc_ui = doc_ui\n    self.operation_id_callback: Callable = operation_id_callback\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.api_blueprint.APIBlueprint.delete","title":"<code>delete(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['DELETE'])</p> Source code in <code>flask_openapi3/api_blueprint.py</code> <pre><code>def delete(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.DELETE\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.DELETE]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.api_blueprint.APIBlueprint.get","title":"<code>get(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['GET'])</p> Source code in <code>flask_openapi3/api_blueprint.py</code> <pre><code>def get(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.GET\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.GET]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.api_blueprint.APIBlueprint.patch","title":"<code>patch(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['PATCH'])</p> Source code in <code>flask_openapi3/api_blueprint.py</code> <pre><code>def patch(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.PATCH\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.PATCH]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.api_blueprint.APIBlueprint.post","title":"<code>post(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['POST'])</p> Source code in <code>flask_openapi3/api_blueprint.py</code> <pre><code>def post(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.POST\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.POST]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.api_blueprint.APIBlueprint.put","title":"<code>put(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['PUT'])</p> Source code in <code>flask_openapi3/api_blueprint.py</code> <pre><code>def put(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.PUT\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.PUT]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/OpenAPI/","title":"OpenAPI","text":"<p>         Bases: <code>Flask</code></p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>class OpenAPI(Flask):\n    def __init__(\n            self,\n            import_name: str,\n            *,\n            info: Optional[Info] = None,\n            security_schemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None,\n            oauth_config: Optional[OAuthConfig] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            doc_ui: bool = True,\n            doc_expansion: str = \"list\",\n            doc_prefix: str = \"/openapi\",\n            api_doc_url: str = \"/openapi.json\",\n            swagger_url: str = \"/swagger\",\n            redoc_url: str = \"/redoc\",\n            rapidoc_url: str = \"/rapidoc\",\n            servers: Optional[List[Server]] = None,\n            operation_id_callback: Callable = get_operation_id_for_path,\n            **kwargs: Any\n    ) -&gt; None:\n\"\"\"\n        Based on Flask. Provide REST api, swagger-ui and redoc.\n\n        Arguments:\n            import_name: just flask import_name\n            info: see https://spec.openapis.org/oas/v3.0.3#info-object\n            security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object\n            oauth_config: OAuth 2.0 configuration,\n                          see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md\n            responses: OpenAPI response model\n            doc_ui: add openapi document UI(swagger and redoc). Defaults to True.\n            doc_expansion: String=[\"list\"*, \"full\", \"none\"].\n                          Controls the default expansion setting for the operations and tags.\n                          It can be 'list' (expands only the tags),\n                         'full' (expands the tags and operations) or 'none' (expands nothing).\n                         see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md\n            doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'.\n            api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'.\n            swagger_url: The Swagger UI documentation. Defaults to `/swagger`.\n            redoc_url: The Redoc UI documentation. Defaults to `/redoc`.\n            rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`.\n            servers: An array of Server Objects, which provide connectivity information to a target server.\n            operation_id_callback: Callback function for custom operation_id generation.\n                          Receives name (str), path (str) and method (str) parameters.\n                          Defaults to `get_operation_id_for_path` from utils\n            kwargs: Flask kwargs\n        \"\"\"\n        super(OpenAPI, self).__init__(import_name, **kwargs)\n\n        self.openapi_version = \"3.0.3\"\n        if info is None:\n            info = Info(title='OpenAPI', version='1.0.0')\n        assert isinstance(info, Info), f\"Info is required (got type {type(info)})\"\n        self.info = info\n        self.security_schemes = security_schemes\n        self.responses = responses or {}\n        self.paths = dict()\n        self.components_schemas = dict()\n        self.components = Components()\n        self.tags = []\n        self.tag_names = []\n        self.doc_prefix = doc_prefix\n        self.api_doc_url = api_doc_url\n        self.swagger_url = swagger_url\n        self.redoc_url = redoc_url\n        self.rapidoc_url = rapidoc_url\n        if oauth_config:\n            if not isinstance(oauth_config, OAuthConfig):\n                raise TypeError(\"`initOAuth` must be `OAuthConfig`\")\n        self.oauth_config = oauth_config\n        if doc_ui:\n            self.init_doc()\n        self.doc_expansion = doc_expansion\n        self.severs = servers\n        self.operation_id_callback: Callable = operation_id_callback\n\n    def init_doc(self) -&gt; None:\n\"\"\"\n        Provide Swagger UI, Redoc and Rapidoc\n        \"\"\"\n        _here = os.path.dirname(__file__)\n        template_folder = os.path.join(_here, 'templates')\n        static_folder = os.path.join(template_folder, 'static')\n\n        blueprint = Blueprint(\n            'openapi',\n            __name__,\n            url_prefix=self.doc_prefix,\n            template_folder=template_folder,\n            static_folder=static_folder\n        )\n        blueprint.add_url_rule(\n            rule=self.api_doc_url,\n            endpoint='api_doc',\n            view_func=lambda: self.api_doc\n        )\n        blueprint.add_url_rule(\n            rule=self.swagger_url,\n            endpoint='swagger',\n            view_func=lambda: render_template(\n                \"swagger.html\",\n                api_doc_url=self.api_doc_url.lstrip('/'),\n                doc_expansion=self.doc_expansion,\n                oauth_config=self.oauth_config.dict() if self.oauth_config else None\n            )\n        )\n        blueprint.add_url_rule(\n            rule=self.redoc_url,\n            endpoint='redoc',\n            view_func=lambda: render_template(\n                \"redoc.html\",\n                api_doc_url=self.api_doc_url.lstrip('/')\n            )\n        )\n        blueprint.add_url_rule(\n            rule=self.rapidoc_url,\n            endpoint='rapidoc',\n            view_func=lambda: render_template(\n                \"rapidoc.html\",\n                api_doc_url=self.api_doc_url.lstrip('/')\n            )\n        )\n        blueprint.add_url_rule(\n            rule='/markdown',\n            endpoint='markdown',\n            view_func=lambda: self.export_to_markdown()\n        )\n        blueprint.add_url_rule(\n            rule='/',\n            endpoint='index',\n            view_func=lambda: render_template(\n                \"index.html\",\n                swagger_url=self.swagger_url.lstrip('/'),\n                redoc_url=self.redoc_url.lstrip('/'),\n                rapidoc_url=self.rapidoc_url.lstrip('/')\n            )\n        )\n        self.register_blueprint(blueprint)\n\n    def export_to_markdown(self) -&gt; Response:\n\"\"\"Export to markdown(Experimental)\"\"\"\n        md = StringIO()\n\n        md.write(openapi_to_markdown(self.api_doc))\n\n        r = make_response(md.getvalue())\n        r.headers['Content-Disposition'] = 'attachment; filename=api.md'\n\n        return r\n\n    @property\n    def api_doc(self) -&gt; Dict:\n\"\"\"Generate Specification json\"\"\"\n        spec = APISpec(\n            openapi=self.openapi_version,\n            info=self.info,\n            servers=self.severs,\n            externalDocs=ExternalDocumentation(\n                url=f'{self.doc_prefix}/markdown',\n                description='Export to markdown'\n            )\n        )\n        spec.tags = self.tags or None\n        spec.paths = self.paths\n        self.components.schemas = self.components_schemas\n        self.components.securitySchemes = self.security_schemes\n        spec.components = self.components\n        return json.loads(spec.json(by_alias=True, exclude_none=True))\n\n    def register_api(self, api: APIBlueprint) -&gt; None:\n\"\"\"Register APIBlueprint\"\"\"\n        for tag in api.tags:\n            if tag.name not in self.tag_names:\n                self.tags.append(tag)\n        self.paths.update(**api.paths)\n        self.components_schemas.update(**api.components_schemas)\n        self.register_blueprint(api)\n\n    def _do_decorator(\n            self,\n            rule: str,\n            func: Callable,\n            *,\n            tags: List[Tag] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Dict[str, Type[BaseModel]] = None,\n            extra_responses: Dict[str, dict] = None,\n            security: List[Dict[str, List[Any]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True,\n            method: str = HTTPMethod.GET\n    ) -&gt; Tuple[\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Type[BaseModel],\n        Dict[str, Type[BaseModel]]\n    ]:\n\"\"\"\n        Collect openapi specification information\n        :param rule: flask route\n        :param func: flask view_func\n        :param tags: api tag\n        :param responses: response model\n        :param extra_responses: extra response dict\n        :param security: security name\n        :param deprecated: mark as deprecated support. Default to not True.\n        :param doc_ui: add openapi document UI(swagger and redoc). Defaults to True.\n        :param operation_id: unique string used to identify the operation.\n        :param method: api method\n        :return:\n        \"\"\"\n        if doc_ui is True:\n            if responses is None:\n                responses = {}\n            if extra_responses is None:\n                extra_responses = {}\n            validate_responses_type(responses)\n            validate_responses_type(self.responses)\n            validate_responses_type(extra_responses)\n            # global response combine api responses\n            combine_responses = deepcopy(self.responses)\n            combine_responses.update(**responses)\n            # create operation\n            operation = get_operation(func, summary=summary, description=description)\n            # add security\n            operation.security = security\n            # only set `deprecated` if True otherwise leave it as None\n            if deprecated:\n                operation.deprecated = True\n            # Unique string used to identify the operation.\n            operation.operationId = operation_id or self.operation_id_callback(\n                name=func.__name__, path=rule, method=method\n            )\n            # store tags\n            parse_and_store_tags(tags, self.tags, self.tag_names, operation)\n            # parse parameters\n            header, cookie, path, query, form, body = \\\n                parse_parameters(func, components_schemas=self.components_schemas, operation=operation)\n            # parse response\n            get_responses(combine_responses, extra_responses, self.components_schemas, operation)\n            uri = get_openapi_path(rule)\n            # parse method\n            parse_method(uri, method, self.paths, operation)\n            return header, cookie, path, query, form, body, combine_responses\n        else:\n            # parse parameters\n            header, cookie, path, query, form, body = parse_parameters(func, doc_ui=False)\n            return header, cookie, path, query, form, body, {}\n\n    def get(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.GET\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.GET]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def post(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.POST\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.POST]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def put(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.PUT\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.PUT]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def delete(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.DELETE\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.DELETE]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n\n    def patch(\n            self,\n            rule: str,\n            *,\n            tags: Optional[List[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            responses: Optional[Dict[str, Type[BaseModel]]] = None,\n            extra_responses: Optional[Dict[str, dict]] = None,\n            security: Optional[List[Dict[str, List[Any]]]] = None,\n            deprecated: Optional[bool] = None,\n            operation_id: Optional[str] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, combine_responses = \\\n                self._do_decorator(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    responses=responses,\n                    extra_responses=extra_responses,\n                    security=security,\n                    deprecated=deprecated,\n                    operation_id=operation_id,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.PATCH\n                )\n\n            @wraps(func)\n            def wrapper(**kwargs) -&gt; Response:\n                resp = _do_wrapper(\n                    func,\n                    responses=combine_responses,\n                    header=header,\n                    cookie=cookie,\n                    path=path,\n                    query=query,\n                    form=form,\n                    body=body,\n                    **kwargs\n                )\n                return resp\n\n            options = {\"methods\": [HTTPMethod.PATCH]}\n            self.add_url_rule(rule, view_func=wrapper, **options)\n\n            return wrapper\n\n        return decorator\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.api_doc","title":"<code>api_doc: Dict</code>  <code>property</code>","text":"<p>Generate Specification json</p>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.__init__","title":"<code>__init__(import_name, *, info=None, security_schemes=None, oauth_config=None, responses=None, doc_ui=True, doc_expansion='list', doc_prefix='/openapi', api_doc_url='/openapi.json', swagger_url='/swagger', redoc_url='/redoc', rapidoc_url='/rapidoc', servers=None, operation_id_callback=get_operation_id_for_path, **kwargs)</code>","text":"<p>Based on Flask. Provide REST api, swagger-ui and redoc.</p> <p>Parameters:</p> Name Type Description Default <code>import_name</code> <code>str</code> <p>just flask import_name</p> required <code>info</code> <code>Optional[Info]</code> <p>see https://spec.openapis.org/oas/v3.0.3#info-object</p> <code>None</code> <code>security_schemes</code> <code>Optional[Dict[str, Union[SecurityScheme, Reference]]]</code> <p>see https://spec.openapis.org/oas/v3.0.3#security-scheme-object</p> <code>None</code> <code>oauth_config</code> <code>Optional[OAuthConfig]</code> <p>OAuth 2.0 configuration,           see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md</p> <code>None</code> <code>responses</code> <code>Optional[Dict[str, Type[BaseModel]]]</code> <p>OpenAPI response model</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>add openapi document UI(swagger and redoc). Defaults to True.</p> <code>True</code> <code>doc_expansion</code> <code>str</code> <p>String=[\"list\"*, \"full\", \"none\"].           Controls the default expansion setting for the operations and tags.           It can be 'list' (expands only the tags),          'full' (expands the tags and operations) or 'none' (expands nothing).          see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md</p> <code>'list'</code> <code>doc_prefix</code> <code>str</code> <p>URL prefix used for OpenAPI document and UI. Defaults to '/openapi'.</p> <code>'/openapi'</code> <code>api_doc_url</code> <code>str</code> <p>The OpenAPI Spec documentation. Defaults to '/openapi.json'.</p> <code>'/openapi.json'</code> <code>swagger_url</code> <code>str</code> <p>The Swagger UI documentation. Defaults to <code>/swagger</code>.</p> <code>'/swagger'</code> <code>redoc_url</code> <code>str</code> <p>The Redoc UI documentation. Defaults to <code>/redoc</code>.</p> <code>'/redoc'</code> <code>rapidoc_url</code> <code>str</code> <p>The RapiDoc UI documentation. Defaults to <code>/rapidoc</code>.</p> <code>'/rapidoc'</code> <code>servers</code> <code>Optional[List[Server]]</code> <p>An array of Server Objects, which provide connectivity information to a target server.</p> <code>None</code> <code>operation_id_callback</code> <code>Callable</code> <p>Callback function for custom operation_id generation.           Receives name (str), path (str) and method (str) parameters.           Defaults to <code>get_operation_id_for_path</code> from utils</p> <code>get_operation_id_for_path</code> <code>kwargs</code> <code>Any</code> <p>Flask kwargs</p> <code>{}</code> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def __init__(\n        self,\n        import_name: str,\n        *,\n        info: Optional[Info] = None,\n        security_schemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None,\n        oauth_config: Optional[OAuthConfig] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        doc_ui: bool = True,\n        doc_expansion: str = \"list\",\n        doc_prefix: str = \"/openapi\",\n        api_doc_url: str = \"/openapi.json\",\n        swagger_url: str = \"/swagger\",\n        redoc_url: str = \"/redoc\",\n        rapidoc_url: str = \"/rapidoc\",\n        servers: Optional[List[Server]] = None,\n        operation_id_callback: Callable = get_operation_id_for_path,\n        **kwargs: Any\n) -&gt; None:\n\"\"\"\n    Based on Flask. Provide REST api, swagger-ui and redoc.\n\n    Arguments:\n        import_name: just flask import_name\n        info: see https://spec.openapis.org/oas/v3.0.3#info-object\n        security_schemes: see https://spec.openapis.org/oas/v3.0.3#security-scheme-object\n        oauth_config: OAuth 2.0 configuration,\n                      see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md\n        responses: OpenAPI response model\n        doc_ui: add openapi document UI(swagger and redoc). Defaults to True.\n        doc_expansion: String=[\"list\"*, \"full\", \"none\"].\n                      Controls the default expansion setting for the operations and tags.\n                      It can be 'list' (expands only the tags),\n                     'full' (expands the tags and operations) or 'none' (expands nothing).\n                     see https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md\n        doc_prefix: URL prefix used for OpenAPI document and UI. Defaults to '/openapi'.\n        api_doc_url: The OpenAPI Spec documentation. Defaults to '/openapi.json'.\n        swagger_url: The Swagger UI documentation. Defaults to `/swagger`.\n        redoc_url: The Redoc UI documentation. Defaults to `/redoc`.\n        rapidoc_url: The RapiDoc UI documentation. Defaults to `/rapidoc`.\n        servers: An array of Server Objects, which provide connectivity information to a target server.\n        operation_id_callback: Callback function for custom operation_id generation.\n                      Receives name (str), path (str) and method (str) parameters.\n                      Defaults to `get_operation_id_for_path` from utils\n        kwargs: Flask kwargs\n    \"\"\"\n    super(OpenAPI, self).__init__(import_name, **kwargs)\n\n    self.openapi_version = \"3.0.3\"\n    if info is None:\n        info = Info(title='OpenAPI', version='1.0.0')\n    assert isinstance(info, Info), f\"Info is required (got type {type(info)})\"\n    self.info = info\n    self.security_schemes = security_schemes\n    self.responses = responses or {}\n    self.paths = dict()\n    self.components_schemas = dict()\n    self.components = Components()\n    self.tags = []\n    self.tag_names = []\n    self.doc_prefix = doc_prefix\n    self.api_doc_url = api_doc_url\n    self.swagger_url = swagger_url\n    self.redoc_url = redoc_url\n    self.rapidoc_url = rapidoc_url\n    if oauth_config:\n        if not isinstance(oauth_config, OAuthConfig):\n            raise TypeError(\"`initOAuth` must be `OAuthConfig`\")\n    self.oauth_config = oauth_config\n    if doc_ui:\n        self.init_doc()\n    self.doc_expansion = doc_expansion\n    self.severs = servers\n    self.operation_id_callback: Callable = operation_id_callback\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.delete","title":"<code>delete(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['DELETE'])</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def delete(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['DELETE'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.DELETE\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.DELETE]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.export_to_markdown","title":"<code>export_to_markdown()</code>","text":"<p>Export to markdown(Experimental)</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def export_to_markdown(self) -&gt; Response:\n\"\"\"Export to markdown(Experimental)\"\"\"\n    md = StringIO()\n\n    md.write(openapi_to_markdown(self.api_doc))\n\n    r = make_response(md.getvalue())\n    r.headers['Content-Disposition'] = 'attachment; filename=api.md'\n\n    return r\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.get","title":"<code>get(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['GET'])</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def get(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['GET'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.GET\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.GET]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.init_doc","title":"<code>init_doc()</code>","text":"<p>Provide Swagger UI, Redoc and Rapidoc</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def init_doc(self) -&gt; None:\n\"\"\"\n    Provide Swagger UI, Redoc and Rapidoc\n    \"\"\"\n    _here = os.path.dirname(__file__)\n    template_folder = os.path.join(_here, 'templates')\n    static_folder = os.path.join(template_folder, 'static')\n\n    blueprint = Blueprint(\n        'openapi',\n        __name__,\n        url_prefix=self.doc_prefix,\n        template_folder=template_folder,\n        static_folder=static_folder\n    )\n    blueprint.add_url_rule(\n        rule=self.api_doc_url,\n        endpoint='api_doc',\n        view_func=lambda: self.api_doc\n    )\n    blueprint.add_url_rule(\n        rule=self.swagger_url,\n        endpoint='swagger',\n        view_func=lambda: render_template(\n            \"swagger.html\",\n            api_doc_url=self.api_doc_url.lstrip('/'),\n            doc_expansion=self.doc_expansion,\n            oauth_config=self.oauth_config.dict() if self.oauth_config else None\n        )\n    )\n    blueprint.add_url_rule(\n        rule=self.redoc_url,\n        endpoint='redoc',\n        view_func=lambda: render_template(\n            \"redoc.html\",\n            api_doc_url=self.api_doc_url.lstrip('/')\n        )\n    )\n    blueprint.add_url_rule(\n        rule=self.rapidoc_url,\n        endpoint='rapidoc',\n        view_func=lambda: render_template(\n            \"rapidoc.html\",\n            api_doc_url=self.api_doc_url.lstrip('/')\n        )\n    )\n    blueprint.add_url_rule(\n        rule='/markdown',\n        endpoint='markdown',\n        view_func=lambda: self.export_to_markdown()\n    )\n    blueprint.add_url_rule(\n        rule='/',\n        endpoint='index',\n        view_func=lambda: render_template(\n            \"index.html\",\n            swagger_url=self.swagger_url.lstrip('/'),\n            redoc_url=self.redoc_url.lstrip('/'),\n            rapidoc_url=self.rapidoc_url.lstrip('/')\n        )\n    )\n    self.register_blueprint(blueprint)\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.patch","title":"<code>patch(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['PATCH'])</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def patch(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PATCH'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.PATCH\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.PATCH]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.post","title":"<code>post(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['POST'])</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def post(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['POST'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.POST\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.POST]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.put","title":"<code>put(rule, *, tags=None, summary=None, description=None, responses=None, extra_responses=None, security=None, deprecated=None, operation_id=None, doc_ui=True)</code>","text":"<p>Decorator for rest api, like: app.route(methods=['PUT'])</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def put(\n        self,\n        rule: str,\n        *,\n        tags: Optional[List[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        responses: Optional[Dict[str, Type[BaseModel]]] = None,\n        extra_responses: Optional[Dict[str, dict]] = None,\n        security: Optional[List[Dict[str, List[Any]]]] = None,\n        deprecated: Optional[bool] = None,\n        operation_id: Optional[str] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n\"\"\"Decorator for rest api, like: app.route(methods=['PUT'])\"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, combine_responses = \\\n            self._do_decorator(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                responses=responses,\n                extra_responses=extra_responses,\n                security=security,\n                deprecated=deprecated,\n                operation_id=operation_id,\n                doc_ui=doc_ui,\n                method=HTTPMethod.PUT\n            )\n\n        @wraps(func)\n        def wrapper(**kwargs) -&gt; Response:\n            resp = _do_wrapper(\n                func,\n                responses=combine_responses,\n                header=header,\n                cookie=cookie,\n                path=path,\n                query=query,\n                form=form,\n                body=body,\n                **kwargs\n            )\n            return resp\n\n        options = {\"methods\": [HTTPMethod.PUT]}\n        self.add_url_rule(rule, view_func=wrapper, **options)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.openapi.OpenAPI.register_api","title":"<code>register_api(api)</code>","text":"<p>Register APIBlueprint</p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def register_api(self, api: APIBlueprint) -&gt; None:\n\"\"\"Register APIBlueprint\"\"\"\n    for tag in api.tags:\n        if tag.name not in self.tag_names:\n            self.tags.append(tag)\n    self.paths.update(**api.paths)\n    self.components_schemas.update(**api.components_schemas)\n    self.register_blueprint(api)\n</code></pre>"},{"location":"Reference/Model/APISpec/","title":"APISpec","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/__init__.py</code> <pre><code>class APISpec(BaseModel):\n    openapi: str\n    info: Info\n    servers: Optional[List[Server]] = None\n    paths: Dict[str, PathItem] = None\n    components: Optional[Components] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    tags: Optional[List[Tag]] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n</code></pre>"},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.components","title":"<code>components: Optional[Components] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.externalDocs","title":"<code>externalDocs: Optional[ExternalDocumentation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.info","title":"<code>info: Info</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.openapi","title":"<code>openapi: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.paths","title":"<code>paths: Dict[str, PathItem] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.security","title":"<code>security: Optional[List[Dict[str, List[str]]]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.servers","title":"<code>servers: Optional[List[Server]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/APISpec/#flask_openapi3.models.APISpec.tags","title":"<code>tags: Optional[List[Tag]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/","title":"common","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding","title":"<code>Encoding</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/common.py</code> <pre><code>class Encoding(BaseModel):\n    contentType: Optional[str] = None\n    # headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None\n    style: Optional[str] = None\n    explode: Optional[bool] = True\n    allowReserved: Optional[bool] = None\n</code></pre>"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.allowReserved","title":"<code>allowReserved: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.contentType","title":"<code>contentType: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.explode","title":"<code>explode: Optional[bool] = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Encoding.style","title":"<code>style: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation","title":"<code>ExternalDocumentation</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/common.py</code> <pre><code>class ExternalDocumentation(BaseModel):\n    url: str\n    description: Optional[str] = None\n</code></pre>"},{"location":"Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.ExternalDocumentation.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.MediaType","title":"<code>MediaType</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/common.py</code> <pre><code>class MediaType(BaseModel):\n    schema_: Optional[Union[Schema, Reference]] = Field(None, alias=\"schema\")\n    encoding: Optional[Dict[str, Encoding]] = None\n</code></pre>"},{"location":"Reference/Model/common/#flask_openapi3.models.common.MediaType.encoding","title":"<code>encoding: Optional[Dict[str, Encoding]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.MediaType.schema_","title":"<code>schema_: Optional[Union[Schema, Reference]] = Field(None, alias='schema')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Reference","title":"<code>Reference</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/common.py</code> <pre><code>class Reference(BaseModel):\n    ref: str = Field(..., alias=\"$ref\")\n</code></pre>"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Reference.ref","title":"<code>ref: str = Field(Ellipsis, alias='$ref')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Response","title":"<code>Response</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/common.py</code> <pre><code>class Response(BaseModel):\n    description: Optional[str]\n    content: Optional[Dict[str, MediaType]] = None\n</code></pre>"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Response.content","title":"<code>content: Optional[Dict[str, MediaType]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Response.description","title":"<code>description: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema","title":"<code>Schema</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/common.py</code> <pre><code>class Schema(BaseModel):\n    ref: Optional[str] = Field(None, alias=\"$ref\")\n    title: Optional[str] = None\n    multipleOf: Optional[float] = None\n    maximum: Optional[float] = None\n    exclusiveMaximum: Optional[float] = None\n    minimum: Optional[float] = None\n    exclusiveMinimum: Optional[float] = None\n    maxLength: Optional[int] = Field(None, gte=0)\n    minLength: Optional[int] = Field(None, gte=0)\n    pattern: Optional[str] = None\n    maxItems: Optional[int] = Field(None, gte=0)\n    minItems: Optional[int] = Field(None, gte=0)\n    uniqueItems: Optional[bool] = None\n    maxProperties: Optional[int] = Field(None, gte=0)\n    minProperties: Optional[int] = Field(None, gte=0)\n    required: Optional[List[str]] = None\n    enum: Optional[List[Any]] = None\n    type: Optional[str] = None\n    allOf: Optional[List[Any]] = None\n    oneOf: Optional[List[Any]] = None\n    anyOf: Optional[List[Any]] = None\n    not_: Optional[Any] = Field(None, alias=\"not\")\n    items: Optional[Any] = None\n    properties: Optional[Dict[str, Any]] = None\n    additionalProperties: Optional[Union[Dict[str, Any], bool]] = None\n    description: Optional[str] = None\n    format: Optional[str] = None\n    default: Optional[Any] = None\n    nullable: Optional[bool] = None\n    readOnly: Optional[bool] = None\n    writeOnly: Optional[bool] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    example: Optional[Any] = None\n    deprecated: Optional[bool] = None\n</code></pre>"},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.additionalProperties","title":"<code>additionalProperties: Optional[Union[Dict[str, Any], bool]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.allOf","title":"<code>allOf: Optional[List[Any]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.anyOf","title":"<code>anyOf: Optional[List[Any]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.default","title":"<code>default: Optional[Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.deprecated","title":"<code>deprecated: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.enum","title":"<code>enum: Optional[List[Any]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.example","title":"<code>example: Optional[Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.exclusiveMaximum","title":"<code>exclusiveMaximum: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.exclusiveMinimum","title":"<code>exclusiveMinimum: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.externalDocs","title":"<code>externalDocs: Optional[ExternalDocumentation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.format","title":"<code>format: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.items","title":"<code>items: Optional[Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maxItems","title":"<code>maxItems: Optional[int] = Field(None, gte=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maxLength","title":"<code>maxLength: Optional[int] = Field(None, gte=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maxProperties","title":"<code>maxProperties: Optional[int] = Field(None, gte=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.maximum","title":"<code>maximum: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minItems","title":"<code>minItems: Optional[int] = Field(None, gte=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minLength","title":"<code>minLength: Optional[int] = Field(None, gte=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minProperties","title":"<code>minProperties: Optional[int] = Field(None, gte=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.minimum","title":"<code>minimum: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.multipleOf","title":"<code>multipleOf: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.not_","title":"<code>not_: Optional[Any] = Field(None, alias='not')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.nullable","title":"<code>nullable: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.oneOf","title":"<code>oneOf: Optional[List[Any]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.pattern","title":"<code>pattern: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.properties","title":"<code>properties: Optional[Dict[str, Any]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.readOnly","title":"<code>readOnly: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.ref","title":"<code>ref: Optional[str] = Field(None, alias='$ref')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.required","title":"<code>required: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.title","title":"<code>title: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.type","title":"<code>type: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.uniqueItems","title":"<code>uniqueItems: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/common/#flask_openapi3.models.common.Schema.writeOnly","title":"<code>writeOnly: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/component/","title":"component","text":""},{"location":"Reference/Model/component/#flask_openapi3.models.component.Components","title":"<code>Components</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/component.py</code> <pre><code>class Components(BaseModel):\n    schemas: Optional[Dict[str, Union[Schema, Reference]]] = None\n    securitySchemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None\n</code></pre>"},{"location":"Reference/Model/component/#flask_openapi3.models.component.Components.schemas","title":"<code>schemas: Optional[Dict[str, Union[Schema, Reference]]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/component/#flask_openapi3.models.component.Components.securitySchemes","title":"<code>securitySchemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/file/","title":"file","text":""},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage","title":"<code>FileStorage</code>","text":"<p>         Bases: <code>_FileStorage</code></p> <p>An uploaded file included as part of the request data.</p> Source code in <code>flask_openapi3/models/file.py</code> <pre><code>class FileStorage(_FileStorage):\n\"\"\"\n    An uploaded file included as part of the request data.\n    \"\"\"\n\n    @classmethod\n    def __get_validators__(cls) -&gt; 'Callable[..., Any]':\n        # one or more validators may be yielded which will be called in the\n        # order to validate the input, each validator will receive as an input\n        # the value returned from the previous validator\n        yield cls.validate\n\n    @classmethod\n    def __modify_schema__(cls, field_schema: Dict[str, Any]) -&gt; None:\n        field_schema.update(\n            format=\"binary\",\n            type=\"string\"\n        )\n\n    @classmethod\n    def validate(cls, value: Any) -&gt; '_FileStorage':\n        if not isinstance(value, _FileStorage):\n            raise TypeError('werkzeug.datastructures.FileStorage required')\n\n        return value\n</code></pre>"},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage.__get_validators__","title":"<code>__get_validators__()</code>  <code>classmethod</code>","text":"Source code in <code>flask_openapi3/models/file.py</code> <pre><code>@classmethod\ndef __get_validators__(cls) -&gt; 'Callable[..., Any]':\n    # one or more validators may be yielded which will be called in the\n    # order to validate the input, each validator will receive as an input\n    # the value returned from the previous validator\n    yield cls.validate\n</code></pre>"},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage.__modify_schema__","title":"<code>__modify_schema__(field_schema)</code>  <code>classmethod</code>","text":"Source code in <code>flask_openapi3/models/file.py</code> <pre><code>@classmethod\ndef __modify_schema__(cls, field_schema: Dict[str, Any]) -&gt; None:\n    field_schema.update(\n        format=\"binary\",\n        type=\"string\"\n    )\n</code></pre>"},{"location":"Reference/Model/file/#flask_openapi3.models.file.FileStorage.validate","title":"<code>validate(value)</code>  <code>classmethod</code>","text":"Source code in <code>flask_openapi3/models/file.py</code> <pre><code>@classmethod\ndef validate(cls, value: Any) -&gt; '_FileStorage':\n    if not isinstance(value, _FileStorage):\n        raise TypeError('werkzeug.datastructures.FileStorage required')\n\n    return value\n</code></pre>"},{"location":"Reference/Model/oauth/","title":"oauth","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig","title":"<code>OAuthConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md</p> Source code in <code>flask_openapi3/models/oauth.py</code> <pre><code>class OAuthConfig(BaseModel):\n\"\"\"\n    More information go to: https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md\n    \"\"\"\n    clientId: Optional[str] = None\n    clientSecret: Optional[str] = None\n    realm: Optional[str] = None\n    appName: Optional[str] = None\n    scopeSeparator: Optional[str] = None\n    scopes: Optional[str] = None\n    additionalQueryStringParams: Optional[Dict[str, str]] = None\n    useBasicAuthenticationWithAccessCodeGrant: Optional[bool] = False\n    usePkceWithAuthorizationCodeGrant: Optional[bool] = False\n</code></pre>"},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.additionalQueryStringParams","title":"<code>additionalQueryStringParams: Optional[Dict[str, str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.appName","title":"<code>appName: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.clientId","title":"<code>clientId: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.clientSecret","title":"<code>clientSecret: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.realm","title":"<code>realm: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.scopeSeparator","title":"<code>scopeSeparator: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.scopes","title":"<code>scopes: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.useBasicAuthenticationWithAccessCodeGrant","title":"<code>useBasicAuthenticationWithAccessCodeGrant: Optional[bool] = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/oauth/#flask_openapi3.models.oauth.OAuthConfig.usePkceWithAuthorizationCodeGrant","title":"<code>usePkceWithAuthorizationCodeGrant: Optional[bool] = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/","title":"parameter","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter","title":"<code>Parameter</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/parameter.py</code> <pre><code>class Parameter(BaseModel):\n    name: str\n    in_: ParameterInType = Field(..., alias=\"in\")  # ... is REQUIRED\n    description: Optional[str] = None\n    required: Optional[bool] = None\n    schema_: Optional[Union[Schema, Reference]] = Field(None, alias=\"schema\")\n</code></pre>"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.in_","title":"<code>in_: ParameterInType = Field(Ellipsis, alias='in')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.required","title":"<code>required: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.Parameter.schema_","title":"<code>schema_: Optional[Union[Schema, Reference]] = Field(None, alias='schema')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType","title":"<code>ParameterInType</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>flask_openapi3/models/parameter.py</code> <pre><code>class ParameterInType(str, Enum):\n    query = \"query\"\n    header = \"header\"\n    path = \"path\"\n    cookie = \"cookie\"\n</code></pre>"},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.cookie","title":"<code>cookie = 'cookie'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.header","title":"<code>header = 'header'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.path","title":"<code>path = 'path'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/parameter/#flask_openapi3.models.parameter.ParameterInType.query","title":"<code>query = 'query'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/","title":"path","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation","title":"<code>Operation</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/path.py</code> <pre><code>class Operation(BaseModel):\n    tags: Optional[List[str]] = None\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    parameters: Optional[List[Union[Parameter, Reference]]] = None\n    requestBody: Optional[Union[RequestBody, Reference]] = None\n    responses: Dict[str, Response] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    deprecated: Optional[bool] = None\n    operationId: Optional[str] = None\n</code></pre>"},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.deprecated","title":"<code>deprecated: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.operationId","title":"<code>operationId: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.parameters","title":"<code>parameters: Optional[List[Union[Parameter, Reference]]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.requestBody","title":"<code>requestBody: Optional[Union[RequestBody, Reference]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.responses","title":"<code>responses: Dict[str, Response] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.security","title":"<code>security: Optional[List[Dict[str, List[str]]]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.summary","title":"<code>summary: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.Operation.tags","title":"<code>tags: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem","title":"<code>PathItem</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/path.py</code> <pre><code>class PathItem(BaseModel):\n    ref: Optional[str] = Field(None, alias=\"$ref\")\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    get: Optional[Operation] = None\n    put: Optional[Operation] = None\n    post: Optional[Operation] = None\n    delete: Optional[Operation] = None\n    options: Optional[Operation] = None\n    head: Optional[Operation] = None\n    patch: Optional[Operation] = None\n    trace: Optional[Operation] = None\n</code></pre>"},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.delete","title":"<code>delete: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.get","title":"<code>get: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.head","title":"<code>head: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.options","title":"<code>options: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.patch","title":"<code>patch: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.post","title":"<code>post: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.put","title":"<code>put: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.ref","title":"<code>ref: Optional[str] = Field(None, alias='$ref')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.summary","title":"<code>summary: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.PathItem.trace","title":"<code>trace: Optional[Operation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody","title":"<code>RequestBody</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/path.py</code> <pre><code>class RequestBody(BaseModel):\n    description: Optional[str] = None\n    content: Dict[str, MediaType]\n    required: Optional[bool] = Field(default=True)\n</code></pre>"},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody.content","title":"<code>content: Dict[str, MediaType]</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/path/#flask_openapi3.models.path.RequestBody.required","title":"<code>required: Optional[bool] = Field(default=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/","title":"security","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityScheme","title":"<code>SecurityScheme = Union[APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer]</code>  <code>module-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKey","title":"<code>APIKey</code>","text":"<p>         Bases: <code>SecurityBase</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class APIKey(SecurityBase):\n    type_ = Field(default=SecuritySchemeType.apiKey, alias=\"type\")\n    in_: APIKeyIn = Field(..., alias=\"in\")\n    name: str\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKey.in_","title":"<code>in_: APIKeyIn = Field(Ellipsis, alias='in')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKey.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKey.type_","title":"<code>type_ = Field(default=SecuritySchemeType.apiKey, alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn","title":"<code>APIKeyIn</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class APIKeyIn(str, Enum):\n    query = \"query\"\n    header = \"header\"\n    cookie = \"cookie\"\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.cookie","title":"<code>cookie = 'cookie'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.header","title":"<code>header = 'header'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.APIKeyIn.query","title":"<code>query = 'query'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBase","title":"<code>HTTPBase</code>","text":"<p>         Bases: <code>SecurityBase</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class HTTPBase(SecurityBase):\n    type_ = Field(default=SecuritySchemeType.http, alias=\"type\")\n    scheme: str\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBase.scheme","title":"<code>scheme: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBase.type_","title":"<code>type_ = Field(default=SecuritySchemeType.http, alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBearer","title":"<code>HTTPBearer</code>","text":"<p>         Bases: <code>HTTPBase</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class HTTPBearer(HTTPBase):\n    scheme = \"bearer\"\n    bearerFormat: Optional[str] = None\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBearer.bearerFormat","title":"<code>bearerFormat: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.HTTPBearer.scheme","title":"<code>scheme = 'bearer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuth2","title":"<code>OAuth2</code>","text":"<p>         Bases: <code>SecurityBase</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OAuth2(SecurityBase):\n    type_ = Field(default=SecuritySchemeType.oauth2, alias=\"type\")\n    flows: OAuthFlows\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuth2.flows","title":"<code>flows: OAuthFlows</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuth2.type_","title":"<code>type_ = Field(default=SecuritySchemeType.oauth2, alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlow","title":"<code>OAuthFlow</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OAuthFlow(BaseModel):\n    refreshUrl: Optional[str] = None\n    scopes: Dict[str, str] = {}\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlow.refreshUrl","title":"<code>refreshUrl: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlow.scopes","title":"<code>scopes: Dict[str, str] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode","title":"<code>OAuthFlowAuthorizationCode</code>","text":"<p>         Bases: <code>OAuthFlow</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OAuthFlowAuthorizationCode(OAuthFlow):\n    authorizationUrl: str\n    tokenUrl: str\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode.authorizationUrl","title":"<code>authorizationUrl: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowAuthorizationCode.tokenUrl","title":"<code>tokenUrl: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowClientCredentials","title":"<code>OAuthFlowClientCredentials</code>","text":"<p>         Bases: <code>OAuthFlow</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OAuthFlowClientCredentials(OAuthFlow):\n    tokenUrl: str\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowClientCredentials.tokenUrl","title":"<code>tokenUrl: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowImplicit","title":"<code>OAuthFlowImplicit</code>","text":"<p>         Bases: <code>OAuthFlow</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OAuthFlowImplicit(OAuthFlow):\n    authorizationUrl: str\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowImplicit.authorizationUrl","title":"<code>authorizationUrl: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowPassword","title":"<code>OAuthFlowPassword</code>","text":"<p>         Bases: <code>OAuthFlow</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OAuthFlowPassword(OAuthFlow):\n    tokenUrl: str\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlowPassword.tokenUrl","title":"<code>tokenUrl: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows","title":"<code>OAuthFlows</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OAuthFlows(BaseModel):\n    implicit: Optional[OAuthFlowImplicit] = None\n    password: Optional[OAuthFlowPassword] = None\n    clientCredentials: Optional[OAuthFlowClientCredentials] = None\n    authorizationCode: Optional[OAuthFlowAuthorizationCode] = None\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.authorizationCode","title":"<code>authorizationCode: Optional[OAuthFlowAuthorizationCode] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.clientCredentials","title":"<code>clientCredentials: Optional[OAuthFlowClientCredentials] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.implicit","title":"<code>implicit: Optional[OAuthFlowImplicit] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OAuthFlows.password","title":"<code>password: Optional[OAuthFlowPassword] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OpenIdConnect","title":"<code>OpenIdConnect</code>","text":"<p>         Bases: <code>SecurityBase</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class OpenIdConnect(SecurityBase):\n    type_ = Field(default=SecuritySchemeType.openIdConnect, alias=\"type\")\n    openIdConnectUrl: str\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.OpenIdConnect.openIdConnectUrl","title":"<code>openIdConnectUrl: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.OpenIdConnect.type_","title":"<code>type_ = Field(default=SecuritySchemeType.openIdConnect, alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityBase","title":"<code>SecurityBase</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class SecurityBase(BaseModel):\n    type_: SecuritySchemeType = Field(..., alias=\"type\")\n    description: Optional[str] = None\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityBase.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecurityBase.type_","title":"<code>type_: SecuritySchemeType = Field(Ellipsis, alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType","title":"<code>SecuritySchemeType</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>flask_openapi3/models/security.py</code> <pre><code>class SecuritySchemeType(str, Enum):\n    apiKey = \"apiKey\"\n    http = \"http\"\n    oauth2 = \"oauth2\"\n    openIdConnect = \"openIdConnect\"\n</code></pre>"},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.apiKey","title":"<code>apiKey = 'apiKey'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.http","title":"<code>http = 'http'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.oauth2","title":"<code>oauth2 = 'oauth2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/security/#flask_openapi3.models.security.SecuritySchemeType.openIdConnect","title":"<code>openIdConnect = 'openIdConnect'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/tag/","title":"tag","text":""},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag","title":"<code>Tag</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/tag.py</code> <pre><code>class Tag(BaseModel):\n    name: str\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n</code></pre>"},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag.description","title":"<code>description: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag.externalDocs","title":"<code>externalDocs: Optional[ExternalDocumentation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/tag/#flask_openapi3.models.tag.Tag.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"Reference/Model/validation_error/","title":"validation_error","text":""},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity","title":"<code>UnprocessableEntity</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/validation_error.py</code> <pre><code>class UnprocessableEntity(BaseModel):\n    # More information: https://pydantic-docs.helpmanual.io/usage/models/#error-handling\n    loc: Optional[List[str]] = Field(None, title=\"Location\", description=\"the error's location as a list. \")\n    msg: Optional[str] = Field(None, title=\"Message\", description=\"a computer-readable identifier of the error type.\")\n    type_: Optional[str] = Field(None, title=\"Error Type\", description=\"a human readable explanation of the error.\")\n    ctx: Optional[Dict[str, Any]] = Field(\n        None,\n        title=\"Error context\",\n        description=\"an optional object which contains values required to render the error message.\"\n    )\n</code></pre>"},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.ctx","title":"<code>ctx: Optional[Dict[str, Any]] = Field(None, title='Error context', description='an optional object which contains values required to render the error message.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.loc","title":"<code>loc: Optional[List[str]] = Field(None, title='Location', description=\"the error's location as a list. \")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.msg","title":"<code>msg: Optional[str] = Field(None, title='Message', description='a computer-readable identifier of the error type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Reference/Model/validation_error/#flask_openapi3.models.validation_error.UnprocessableEntity.type_","title":"<code>type_: Optional[str] = Field(None, title='Error Type', description='a human readable explanation of the error.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"zh/Changelog/","title":"\u66f4\u65b0\u65e5\u5fd7","text":""},{"location":"zh/Example/","title":"\u793a\u4f8b","text":""},{"location":"zh/LICENSE/","title":"\u8bb8\u53ef","text":"<p>MIT License</p> <p>Copyright (c) 2021 llc</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"zh/Quickstart/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p><code>flask_openapi3</code> \u57fa\u4e8e Flask \u548c Pydantic\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528Flask\u4e00\u6837\u4f7f\u7528 <code>flask_openapi3</code>\u3002</p>"},{"location":"zh/Quickstart/#_1","title":"\u6700\u5c0f\u5e94\u7528","text":"<p>\u50cf Flask \u4e00\u6837\uff0c\u521b\u5efa <code>hello.py</code>:</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>\u7136\u540e\u8fd0\u884c\uff1a</p> <pre><code>python hello.py\n</code></pre> <p>\u4f60\u5c06\u4f1a\u770b\u5230\u8f93\u51fa\u4fe1\u606f\uff1a</p> <pre><code> * Serving Flask app 'just_flask' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre>"},{"location":"zh/Quickstart/#rest-api","title":"REST API","text":"<p>\u4f60\u53ef\u4ee5\u5728 <code>flask-openapi3</code> \u4e2d\u4f7f\u7528 <code>get</code>\uff0c<code>post</code>\uff0c<code>put</code>\uff0c<code>patch</code>\uff0c<code>delete</code> \u7b49 REST API \u3002</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.get('/book')\ndef get_books():\n    return [\"book1\", \"book2\"]\n\n\n@app.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"zh/Quickstart/#apiblueprint","title":"APIBlueprint","text":"<p>APIBlueprint \u57fa\u4e8e Flask Blueprint\uff0c \u4f60\u5e94\u8be5\u4f7f\u7528 <code>register_api</code> \u6765\u4ee3\u66ff <code>register_blueprint</code>\u3002</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\napi = APIBlueprint('/book', __name__, url_prefix='/api')\n\n\n@api.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\n# register api\napp.register_api(api)\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"zh/","title":"\u7b80\u4ecb","text":"<p> \u4e3a\u4f60\u7684 Flask \u9879\u76ee\u751f\u6210 REST API \u548c OpenAPI \u6587\u6863\u3002 </p> <p> </p> <p>Flask OpenAPI3 \u662f\u4e00\u4e2a\u57fa\u4e8e Flask \u7684 web API \u6846\u67b6\uff0c\u4f7f\u7528 Pydantic \u9a8c\u8bc1\u6570\u636e\uff0c\u81ea\u52a8\u751f\u6210 Swagger UI\uff0cReDoc \u548c RapiDoc \u4ea4\u4e92\u6587\u6863\u3002</p> <p>\u4e3b\u8981\u7279\u70b9\u6709\uff1a</p> <ul> <li>\u7f16\u7801\u7b80\u5355\uff1a \u4f7f\u7528\u7b80\u5355\u6613\u4e8e\u5b66\u4e60</li> <li>\u6807\u51c6\u7684\u6587\u6863\u89c4\u8303\uff1a \u57fa\u4e8e\u5f00\u653e API \u89c4\u8303</li> <li>\u4ea4\u4e92\u5f0f OpenAPI \u6587\u6863\uff1a Swagger UI, Redoc   \u548c RapiDoc</li> <li>\u6570\u636e\u9a8c\u8bc1\uff1a \u57fa\u4e8e Pydantic \u7684\u5feb\u901f\u6570\u636e\u9a8c\u8bc1</li> </ul>"},{"location":"zh/#_1","title":"\u4f9d\u8d56","text":"<p>Python 3.7+</p> <p>flask-openapi3 \u4f9d\u8d56\u4ee5\u4e0b\u5e93\uff1a</p> <ul> <li>Flask\uff1a\u7528\u4e8eWEB\u670d\u52a1</li> <li>Pydantic\uff1a\u7528\u4e8e\u6570\u636e\u9a8c\u8bc1</li> </ul>"},{"location":"zh/#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install -U flask-openapi3\n</code></pre>"},{"location":"zh/#_3","title":"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b","text":"<p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u66f4\u591a\u793a\u4f8b\u8bf7\u67e5\u770b\u793a\u4f8b\u3002</p> <pre><code>from pydantic import BaseModel\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\n\nbook_tag = Tag(name='book', description='Some Book')\n\n\nclass BookQuery(BaseModel):\n    age: int\n    author: str\n\n\n@app.get('/book', tags=[book_tag])\ndef get_book(query: BookQuery):\n\"\"\"get books\n    get all books\n    \"\"\"\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": query.author},\n            {\"bid\": 2, \"age\": query.age, \"author\": query.author}\n        ]\n    }\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"zh/#api","title":"API \u6587\u6863","text":"<p>\u8fd0\u884c\u7b80\u5355\u793a\u4f8b\uff0c\u7136\u540e\u8bbf\u95ee http://127.0.0.1:5000/openapi\u3002</p> <p>\u4f60\u5c06\u770b\u5230\u6587\u6863\u5165\u53e3\uff1aSwagger UI\uff0c Redoc \u548c RapiDoc\u3002</p> <p> </p>"}]}